name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required for creating releases
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        registry-url: 'https://registry.npmjs.org'
    
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 10.15.1
    
    - name: Get pnpm store directory
      id: pnpm-cache
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
    
    - name: Setup pnpm cache
      uses: actions/cache@v4
      with:
        path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Run linter
      run: pnpm lint:ci || true  # Don't fail on lint warnings
    
    - name: Run format check
      run: pnpm format:check
    
    - name: Build all packages
      run: pnpm build
    
    - name: Run tests
      run: pnpm test
    
    - name: Bundle CLI package
      run: pnpm bundle:cli
    
    - name: Verify bundled CLI
      run: |
        cd packages/cli
        node dist/bundled.js --version
        echo "✓ Bundled CLI verified"
    
    - name: Extract version from tag
      id: extract_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Publish to npm
      run: |
        cd packages/cli
        npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ steps.extract_version.outputs.VERSION }}
        body: |
          ## Installation
          
          ```bash
          npx @cmwen/min-pmt@${{ steps.extract_version.outputs.VERSION }} init
          ```
          
          ## Changes
          
          See [CHANGELOG.md](https://github.com/cmwen/min-pmt/blob/main/CHANGELOG.md) for details.
          
          ## Package Info
          
          - **Package**: [@cmwen/min-pmt](https://www.npmjs.com/package/@cmwen/min-pmt)
          - **Version**: ${{ steps.extract_version.outputs.VERSION }}
          - **Bundled**: Single-file CLI with all functionality
          - **Dependencies**: commander, gray-matter
        draft: false
        prerelease: false
    
    - name: Post-release notification
      run: |
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "  ✨ Successfully released @cmwen/min-pmt@${{ steps.extract_version.outputs.VERSION }}"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo ""
        echo "📦 npm: https://www.npmjs.com/package/@cmwen/min-pmt"
        echo "🔖 Release: https://github.com/cmwen/min-pmt/releases/tag/v${{ steps.extract_version.outputs.VERSION }}"
        echo "📖 Docs: https://github.com/cmwen/min-pmt#readme"
        echo ""
        echo "Test installation:"
        echo "  npx @cmwen/min-pmt@${{ steps.extract_version.outputs.VERSION }} init"